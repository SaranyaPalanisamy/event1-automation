package com.event;


import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;

public class SimpleMathTest {
	
	SimpleMath simpleMath;

	@Rule
	public ExpectedException exception = ExpectedException.none();

	@Before
	public void setUp() {
		simpleMath = new SimpleMath();
	}

	@After
	public void tearDown() {
		simpleMath = null;
	}

	@Test
	public void testSum() {
		

		int actVal = simpleMath.sum(10, 20);

		Assert.assertEquals(30, actVal);

	}
	
	@Test
	public void testSubtraction() {
		

		int actVal = simpleMath.subtraction(30, 20);

		Assert.assertEquals(10, actVal);

	}
	
	@Test
	public void testMultiplication() {

		int actVal = simpleMath.multiplication(30, 20);

		Assert.assertEquals(600, actVal);

	}
	
	@Test
	public void testDivisionForDividendZero() throws Exception{

		try{		
			simpleMath.divison(30, 0);
			Assert.fail();
		}catch(Exception e){
			Assert.assertEquals("Divider can't be zero", e.getMessage());
		}
		


	}
	
	/*@Test
	public void testDivisionForDividendZero() throws Exception{

		exception.expect(Exception.class);
		exception.expectMessage("Divider can't be zero");
		
		simpleMath.divison(30, 0);
		


	}*/
	
	@Test
	public void testDivision() throws Exception{

		int actVal = simpleMath.divison(30, 10);
		
		Assert.assertEquals(3, actVal);


	}
	
	@Test
	public void testEqualsIntegersForNonEqualValues() throws Exception{
		
		Assert.assertFalse(simpleMath.equalIntegers(10,20));


	}
	
	@Test
	public void testEqualsIntegers() throws Exception{
		
		Assert.assertTrue(simpleMath.equalIntegers(10,10));


	}
}
